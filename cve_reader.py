import json
import requests
import argparse

BASE_API_URL = "https://access.redhat.com/hydra/rest/securitydata"


class CVEApiClient:
    def __init__(self, base_url=BASE_API_URL,
                 response_format="json",
                 product=None,
                 pprint=True,
                 dump=False,
                 adv=False
                 ):
        self.response_format = response_format
        self.product = product
        self.pprint = pprint
        self.dump = dump
        self.adv = adv

        self.response_json = None
        self.base_url = base_url

    def get_system_all_cve(self, **kwargs):
        if self.response_format != 'html':
            if self.response_format is None:
                self.response_format = 'json'
            self.response_format = "." + self.response_format
        else:
            response_format = ""
        if self.product is None:
            param_product = ""
        else:
            param_product = "?product=" + self.product
            param_product = param_product.replace(" ", "%20")

        parameter_list = []
        for name, value in kwargs.items():
            if value is not None:
                parameter_list.append(f"?{name}={value}")

        additional_parameters = "".join(parameter_list)

        url = self.base_url + "/cve" + self.response_format + additional_parameters + param_product

        response = requests.get(url)

        if self.response_format != ".json":
            if self.pprint:
                print(f"Pretty printing not available when formatting as {self.response_format}")
            return response.content

        self.response_json = response.json()
        print(url)
        if self.pprint:
            self.pprint_results()

        if self.dump:
            self.dump_to_file()

        return response

    def pprint_results(self, only_with_advisories=False):
        for cve in self.response_json:
            if only_with_advisories and cve['advisories'] == []:
                continue
            print(f"CVE: {cve["CVE"]},",
                  f"severity: {cve['severity']}",
                  f"short description: {cve['bugzilla_description']}",
                  "RHSA entries regarding CVE:", sep="\n", end="\n")
            for errata in cve["advisories"]:
                print(f"\t{errata} => https://access.redhat.com/errata/{errata}")
            print("\n", "=" * 10, "\n")

    def dump_to_file(self):
        with open(self.product + "_CVE_.json", "w") as f:
            json.dump(self.response_json, f)


def interface():
    parser = argparse.ArgumentParser()
    parser.add_argument("-p", "--product",
                        help="Product name, case insensitive, i.e. \"Red Hat Enterprise Linux 8.2\"",
                        action="append",
                        type=str
                        )
    parser.add_argument("-f", "--format",
                        help="Response format: JSON, XML or HTML",
                        action="store")
    parser.add_argument("-a", "--advisories",
                        help="Only show CVEs with RHSA advisories, if not specified shows all CVEs",
                        action="store_true")
    parser.add_argument("-d", "--dump",
                        help="Dump results to a file",
                        action="store_true")
    parser.add_argument("-pp", "--pretty-print",
                        help="Pretty print the JSON output into console if specified",
                        action="store_true")
    # parser.add_argument("--after",
    #                     help="Query CVEs after specified date in format YYYY-MM-DD",
    #                     action="store",
    #                     type=str)
    # parser.add_argument("--before",
    #                     help="Query CVEs before specified date in format YYYY-MM-DD",
    #                     action="store",
    #                     type=str
    #                     )

    args = parser.parse_args()
    CVEApiClient(response_format=args.format,
                 product=args.product[0],
                 pprint=args.pretty_print,
                 adv=args.advisories).get_system_all_cve()


if __name__ == '__main__':
    interface()
